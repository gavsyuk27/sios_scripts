#!/bin/bash

###Exctracting primary key and foreign key columns for cloud_datastore, cloud_environment, cloud_vm, cloud_host, virtual_disk

###Variables
username="postgres"
dbname="CloudOrchDB"
table=""
count=0
columns=""
word=""
files=""
password=""
#Function that gets column names for primary and foreign keys
get_keys()
{
        PGPASSWORD=$2 \
        psql -d CloudOrchDB -U $username << EOF
        SELECT
            kcu.column_name
        FROM 
            information_schema.table_constraints AS tc 
            JOIN information_schema.key_column_usage AS kcu
              ON tc.constraint_name = kcu.constraint_name
            JOIN information_schema.constraint_column_usage AS ccu
              ON ccu.constraint_name = tc.constraint_name
        WHERE constraint_type = 'PRIMARY KEY' AND tc.table_name='$1';

        SELECT
            kcu.column_name
        FROM 
            information_schema.table_constraints AS tc 
            JOIN information_schema.key_column_usage AS kcu
              ON tc.constraint_name = kcu.constraint_name
            JOIN information_schema.constraint_column_usage AS ccu
              ON ccu.constraint_name = tc.constraint_name
        WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name='$1';
EOF
}

#Function that dumps column content to a text file
dump_table()
{
        file="$table.txt"
        PGPASSWORD=$3 \
        psql -d CloudOrchDB -U $username << EOF
        SELECT $1 
        FROM $2 
        \g $file
EOF
 files="$files $file"
}

### main
echo -n "Enter the database name "
read dbname
echo -n "Enter password "
read -s password
echo
echo -n "Enter the names of the tables you wish to extract (Press 0 when you are done) "
until [ "$selection" = "0" ]; do
        read selection
        case $selection in
                0 ) ;;
                * ) table=$selection
                #Get the column names for the primary and foreign keys
                keys=$(get_keys $table $password)
                for word in $keys
                do
                        if [ $count -eq "1" ]
                        then
                                if [[ $word == *"("* ]]
                                then
                                        count=0
                                else
                                        columns="$columns$word,"
                                fi
                        fi

                        if [[ $word == *"---"* ]]
                        then
                                count=1
                        fi
                done
                #Dump the contents of the columns to a text file
                dump_table ${columns::-1} $table $password
                columns=""
        esac
done

tar czvf 'all_keys.tar.gz' $files
rm $files
